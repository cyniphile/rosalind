<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="29116"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.00%)</title><rect x="0.0000%" y="309" width="0.0034%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.00%)</title><rect x="0.0000%" y="293" width="0.0034%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_large (67 samples, 0.23%)</title><rect x="0.0034%" y="229" width="0.2301%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="67"/><text x="0.2534%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (67 samples, 0.23%)</title><rect x="0.0034%" y="213" width="0.2301%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="67"/><text x="0.2534%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (67 samples, 0.23%)</title><rect x="0.0034%" y="197" width="0.2301%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="67"/><text x="0.2534%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;criterion::Criterion as core::default::Default&gt;::default (1 samples, 0.00%)</title><rect x="0.2335%" y="229" width="0.0034%" height="15" fill="rgb(232,128,0)" fg:x="68" fg:w="1"/><text x="0.4835%" y="239.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sync::once::Once::call_inner (1 samples, 0.00%)</title><rect x="0.2335%" y="213" width="0.0034%" height="15" fill="rgb(207,160,47)" fg:x="68" fg:w="1"/><text x="0.4835%" y="223.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.00%)</title><rect x="0.2335%" y="197" width="0.0034%" height="15" fill="rgb(228,23,34)" fg:x="68" fg:w="1"/><text x="0.4835%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sync::once::Once::call_inner (1 samples, 0.00%)</title><rect x="0.2335%" y="181" width="0.0034%" height="15" fill="rgb(218,30,26)" fg:x="68" fg:w="1"/><text x="0.4835%" y="191.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.00%)</title><rect x="0.2335%" y="165" width="0.0034%" height="15" fill="rgb(220,122,19)" fg:x="68" fg:w="1"/><text x="0.4835%" y="175.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`criterion_plot::version (1 samples, 0.00%)</title><rect x="0.2335%" y="149" width="0.0034%" height="15" fill="rgb(250,228,42)" fg:x="68" fg:w="1"/><text x="0.4835%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::process::Command::output (1 samples, 0.00%)</title><rect x="0.2335%" y="133" width="0.0034%" height="15" fill="rgb(240,193,28)" fg:x="68" fg:w="1"/><text x="0.4835%" y="143.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sys::unix::process::process_inner::_&lt;impl std::sys::unix::process::process_common::Command&gt;::spawn (1 samples, 0.00%)</title><rect x="0.2335%" y="117" width="0.0034%" height="15" fill="rgb(216,20,37)" fg:x="68" fg:w="1"/><text x="0.4835%" y="127.50"></text></g><g><title>libsystem_c.dylib`posix_spawnp (1 samples, 0.00%)</title><rect x="0.2335%" y="101" width="0.0034%" height="15" fill="rgb(206,188,39)" fg:x="68" fg:w="1"/><text x="0.4835%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__posix_spawn (1 samples, 0.00%)</title><rect x="0.2335%" y="85" width="0.0034%" height="15" fill="rgb(217,207,13)" fg:x="68" fg:w="1"/><text x="0.4835%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (179 samples, 0.61%)</title><rect x="0.2370%" y="165" width="0.6148%" height="15" fill="rgb(231,73,38)" fg:x="69" fg:w="179"/><text x="0.4870%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (179 samples, 0.61%)</title><rect x="0.2370%" y="149" width="0.6148%" height="15" fill="rgb(225,20,46)" fg:x="69" fg:w="179"/><text x="0.4870%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (179 samples, 0.61%)</title><rect x="0.2370%" y="133" width="0.6148%" height="15" fill="rgb(210,31,41)" fg:x="69" fg:w="179"/><text x="0.4870%" y="143.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;bio_lib_algebraic_rs::DnaNucleotide as bio_lib_algebraic_rs::Nucleotide&gt;::complement (313 samples, 1.08%)</title><rect x="33.2188%" y="149" width="1.0750%" height="15" fill="rgb(221,200,47)" fg:x="9672" fg:w="313"/><text x="33.4688%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;bio_lib_rs::DnaNucleotide as bio_lib_rs::Nucleotide&gt;::complement (334 samples, 1.15%)</title><rect x="34.2939%" y="149" width="1.1471%" height="15" fill="rgb(226,26,5)" fg:x="9985" fg:w="334"/><text x="34.5439%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (1 samples, 0.00%)</title><rect x="35.4410%" y="69" width="0.0034%" height="15" fill="rgb(249,33,26)" fg:x="10319" fg:w="1"/><text x="35.6910%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg_trap (1 samples, 0.00%)</title><rect x="35.4410%" y="53" width="0.0034%" height="15" fill="rgb(235,183,28)" fg:x="10319" fg:w="1"/><text x="35.6910%" y="63.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10,077 samples, 34.61%)</title><rect x="0.8518%" y="165" width="34.6098%" height="15" fill="rgb(221,5,38)" fg:x="248" fg:w="10077"/><text x="1.1018%" y="175.50">reverse_complement_iter_vs_vec-b62295458df4643f`&lt;alloc::..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.02%)</title><rect x="35.4410%" y="149" width="0.0206%" height="15" fill="rgb(247,18,42)" fg:x="10319" fg:w="6"/><text x="35.6910%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="35.4410%" y="133" width="0.0206%" height="15" fill="rgb(241,131,45)" fg:x="10319" fg:w="6"/><text x="35.6910%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.02%)</title><rect x="35.4410%" y="117" width="0.0206%" height="15" fill="rgb(249,31,29)" fg:x="10319" fg:w="6"/><text x="35.6910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.02%)</title><rect x="35.4410%" y="101" width="0.0206%" height="15" fill="rgb(225,111,53)" fg:x="10319" fg:w="6"/><text x="35.6910%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.02%)</title><rect x="35.4410%" y="85" width="0.0206%" height="15" fill="rgb(238,160,17)" fg:x="10319" fg:w="6"/><text x="35.6910%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_large (5 samples, 0.02%)</title><rect x="35.4444%" y="69" width="0.0172%" height="15" fill="rgb(214,148,48)" fg:x="10320" fg:w="5"/><text x="35.6944%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (5 samples, 0.02%)</title><rect x="35.4444%" y="53" width="0.0172%" height="15" fill="rgb(232,36,49)" fg:x="10320" fg:w="5"/><text x="35.6944%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (5 samples, 0.02%)</title><rect x="35.4444%" y="37" width="0.0172%" height="15" fill="rgb(209,103,24)" fg:x="10320" fg:w="5"/><text x="35.6944%" y="47.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;alloc::vec::Vec&lt;bio_lib_algebraic_rs::DnaNucleotide&gt; as bio_lib_algebraic_rs::StringParsable&gt;::parse_string (7,304 samples, 25.09%)</title><rect x="35.4616%" y="165" width="25.0859%" height="15" fill="rgb(229,88,8)" fg:x="10325" fg:w="7304"/><text x="35.7116%" y="175.50">reverse_complement_iter_vs_vec-b62295458..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;bio_lib_algebraic_rs::DnaNucleotide as bio_lib_algebraic_rs::Nucleotide&gt;::complement (337 samples, 1.16%)</title><rect x="60.5475%" y="165" width="1.1574%" height="15" fill="rgb(213,181,19)" fg:x="17629" fg:w="337"/><text x="60.7975%" y="175.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_input (18,761 samples, 64.44%)</title><rect x="0.2370%" y="229" width="64.4354%" height="15" fill="rgb(254,191,54)" fg:x="69" fg:w="18761"/><text x="0.4870%" y="239.50">reverse_complement_iter_vs_vec-b62295458df4643f`criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_with_i..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`criterion::routine::Routine::test (18,761 samples, 64.44%)</title><rect x="0.2370%" y="213" width="64.4354%" height="15" fill="rgb(241,83,37)" fg:x="69" fg:w="18761"/><text x="0.4870%" y="223.50">reverse_complement_iter_vs_vec-b62295458df4643f`criterion::routine::Routine::test</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18,761 samples, 64.44%)</title><rect x="0.2370%" y="197" width="64.4354%" height="15" fill="rgb(233,36,39)" fg:x="69" fg:w="18761"/><text x="0.4870%" y="207.50">reverse_complement_iter_vs_vec-b62295458df4643f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits:..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`criterion::bencher::Bencher&lt;M&gt;::iter (18,761 samples, 64.44%)</title><rect x="0.2370%" y="181" width="64.4354%" height="15" fill="rgb(226,3,54)" fg:x="69" fg:w="18761"/><text x="0.4870%" y="191.50">reverse_complement_iter_vs_vec-b62295458df4643f`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;bio_lib_rs::DnaNucleotide as bio_lib_rs::Nucleotide&gt;::complement (864 samples, 2.97%)</title><rect x="61.7049%" y="165" width="2.9674%" height="15" fill="rgb(245,192,40)" fg:x="17966" fg:w="864"/><text x="61.9549%" y="175.50">rev..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (262 samples, 0.90%)</title><rect x="64.6723%" y="213" width="0.8998%" height="15" fill="rgb(238,167,29)" fg:x="18830" fg:w="262"/><text x="64.9223%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (284 samples, 0.98%)</title><rect x="65.5722%" y="213" width="0.9754%" height="15" fill="rgb(232,182,51)" fg:x="19092" fg:w="284"/><text x="65.8222%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,748 samples, 6.00%)</title><rect x="79.1970%" y="197" width="6.0036%" height="15" fill="rgb(231,60,39)" fg:x="23059" fg:w="1748"/><text x="79.4470%" y="207.50">libsyste..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.00%)</title><rect x="85.2006%" y="197" width="0.0034%" height="15" fill="rgb(208,69,12)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`alloc::raw_vec::finish_grow (1 samples, 0.00%)</title><rect x="85.2006%" y="181" width="0.0034%" height="15" fill="rgb(235,93,37)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.00%)</title><rect x="85.2006%" y="165" width="0.0034%" height="15" fill="rgb(213,116,39)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.00%)</title><rect x="85.2006%" y="149" width="0.0034%" height="15" fill="rgb(222,207,29)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.00%)</title><rect x="85.2006%" y="133" width="0.0034%" height="15" fill="rgb(206,96,30)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (1 samples, 0.00%)</title><rect x="85.2006%" y="117" width="0.0034%" height="15" fill="rgb(218,138,4)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (1 samples, 0.00%)</title><rect x="85.2006%" y="101" width="0.0034%" height="15" fill="rgb(250,191,14)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (1 samples, 0.00%)</title><rect x="85.2006%" y="85" width="0.0034%" height="15" fill="rgb(239,60,40)" fg:x="24807" fg:w="1"/><text x="85.4506%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`getentropy (129 samples, 0.44%)</title><rect x="90.9431%" y="149" width="0.4431%" height="15" fill="rgb(206,27,48)" fg:x="26479" fg:w="129"/><text x="91.1931%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (132 samples, 0.45%)</title><rect x="90.9363%" y="165" width="0.4534%" height="15" fill="rgb(225,35,8)" fg:x="26477" fg:w="132"/><text x="91.1863%" y="175.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`getrandom::getrandom (1 samples, 0.00%)</title><rect x="91.3862%" y="149" width="0.0034%" height="15" fill="rgb(250,213,24)" fg:x="26608" fg:w="1"/><text x="91.6362%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::init_chacha (3 samples, 0.01%)</title><rect x="91.3896%" y="165" width="0.0103%" height="15" fill="rgb(247,123,22)" fg:x="26609" fg:w="3"/><text x="91.6396%" y="175.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::init_chacha::impl_avx (2 samples, 0.01%)</title><rect x="91.3930%" y="149" width="0.0069%" height="15" fill="rgb(231,138,38)" fg:x="26610" fg:w="2"/><text x="91.6430%" y="159.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (147 samples, 0.50%)</title><rect x="90.9294%" y="181" width="0.5049%" height="15" fill="rgb(231,145,46)" fg:x="26475" fg:w="147"/><text x="91.1794%" y="191.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::refill_wide::impl_avx2 (10 samples, 0.03%)</title><rect x="91.3999%" y="165" width="0.0343%" height="15" fill="rgb(251,118,11)" fg:x="26612" fg:w="10"/><text x="91.6499%" y="175.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand::rngs::adapter::reseeding::fork::get_fork_counter (2 samples, 0.01%)</title><rect x="91.4343%" y="181" width="0.0069%" height="15" fill="rgb(217,147,25)" fg:x="26622" fg:w="2"/><text x="91.6843%" y="191.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::refill_wide (78 samples, 0.27%)</title><rect x="91.4411%" y="181" width="0.2679%" height="15" fill="rgb(247,81,37)" fg:x="26624" fg:w="78"/><text x="91.6911%" y="191.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand::rng::Rng::gen (4,160 samples, 14.29%)</title><rect x="85.2040%" y="197" width="14.2877%" height="15" fill="rgb(209,12,38)" fg:x="24808" fg:w="4160"/><text x="85.4540%" y="207.50">reverse_complement_ite..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::refill_wide::impl_avx2 (2,266 samples, 7.78%)</title><rect x="91.7090%" y="181" width="7.7827%" height="15" fill="rgb(227,1,9)" fg:x="26702" fg:w="2266"/><text x="91.9590%" y="191.50">reverse_com..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand::rngs::adapter::reseeding::fork::get_fork_counter (62 samples, 0.21%)</title><rect x="99.4917%" y="197" width="0.2129%" height="15" fill="rgb(248,47,43)" fg:x="28968" fg:w="62"/><text x="99.7417%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::refill_wide (26 samples, 0.09%)</title><rect x="99.7046%" y="197" width="0.0893%" height="15" fill="rgb(221,10,30)" fg:x="29030" fg:w="26"/><text x="99.9546%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9,688 samples, 33.27%)</title><rect x="66.5476%" y="213" width="33.2738%" height="15" fill="rgb(210,229,1)" fg:x="19376" fg:w="9688"/><text x="66.7976%" y="223.50">reverse_complement_iter_vs_vec-b62295458df4643f`&lt;core:..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand_chacha::guts::refill_wide::impl_avx2 (8 samples, 0.03%)</title><rect x="99.7939%" y="197" width="0.0275%" height="15" fill="rgb(222,148,37)" fg:x="29056" fg:w="8"/><text x="100.0439%" y="207.50"></text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`DYLD-STUB$$memcpy (47 samples, 0.16%)</title><rect x="99.8214%" y="213" width="0.1614%" height="15" fill="rgb(234,67,33)" fg:x="29064" fg:w="47"/><text x="100.0714%" y="223.50"></text></g><g><title>all (29,116 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(247,98,35)" fg:x="0" fg:w="29116"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (29,116 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(247,138,52)" fg:x="0" fg:w="29116"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`main (29,115 samples, 100.00%)</title><rect x="0.0034%" y="309" width="99.9966%" height="15" fill="rgb(213,79,30)" fg:x="1" fg:w="29115"/><text x="0.2534%" y="319.50">reverse_complement_iter_vs_vec-b62295458df4643f`main</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::rt::lang_start_internal (29,115 samples, 100.00%)</title><rect x="0.0034%" y="293" width="99.9966%" height="15" fill="rgb(246,177,23)" fg:x="1" fg:w="29115"/><text x="0.2534%" y="303.50">reverse_complement_iter_vs_vec-b62295458df4643f`std::rt::lang_start_internal</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::rt::lang_start::_{{closure}} (29,115 samples, 100.00%)</title><rect x="0.0034%" y="277" width="99.9966%" height="15" fill="rgb(230,62,27)" fg:x="1" fg:w="29115"/><text x="0.2534%" y="287.50">reverse_complement_iter_vs_vec-b62295458df4643f`std::rt::lang_start::_{{closure}}</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`std::sys_common::backtrace::__rust_begin_short_backtrace (29,115 samples, 100.00%)</title><rect x="0.0034%" y="261" width="99.9966%" height="15" fill="rgb(216,154,8)" fg:x="1" fg:w="29115"/><text x="0.2534%" y="271.50">reverse_complement_iter_vs_vec-b62295458df4643f`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`reverse_complement_iter_vs_vec::main (29,115 samples, 100.00%)</title><rect x="0.0034%" y="245" width="99.9966%" height="15" fill="rgb(244,35,45)" fg:x="1" fg:w="29115"/><text x="0.2534%" y="255.50">reverse_complement_iter_vs_vec-b62295458df4643f`reverse_complement_iter_vs_vec::main</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`problems_rs::generate_random_dna (10,286 samples, 35.33%)</title><rect x="64.6723%" y="229" width="35.3277%" height="15" fill="rgb(251,115,12)" fg:x="18830" fg:w="10286"/><text x="64.9223%" y="239.50">reverse_complement_iter_vs_vec-b62295458df4643f`problems_..</text></g><g><title>reverse_complement_iter_vs_vec-b62295458df4643f`rand::rng::Rng::gen (5 samples, 0.02%)</title><rect x="99.9828%" y="213" width="0.0172%" height="15" fill="rgb(240,54,50)" fg:x="29111" fg:w="5"/><text x="100.2328%" y="223.50"></text></g></svg></svg>